<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">		
		<meta http-equiv="X-UA-Compatible" content="ie=edge" />
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css"
			integrity="sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk="
			crossorigin="anonymous"
		/>
		<link rel="stylesheet" type="text/css" href="css/bootstrap.min.css" />
		<link rel="stylesheet" href="css/style.css">
		<title>Nonton Bareng</title>
	</head>
	<body>
		<%- include('navbar.ejs'); %>
		<div class="containerMain mt-3" >
			<div class="roomFlex">
				<div class="roomMain">	
					<!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
					<div id="stackFrame">
						<div id="ytplayer"></div>
					</div>
					<div id="wrapProgress" class="mb-2 mt-1">
						<div id="progress"></div>
					</div>
					<div class="d-block mb-2">
						<button id="playControl" class="btn btn-primary">Play</button>
						<button id="pauseControl" class="btn btn-danger mr-3">Pause</button>
						<button id="draw" class="btn btn-outline-primary">Draw</button>
						<button id="clear" class="btn btn-outline-danger">Clear</button>
						<button id="close" class="btn btn-outline-dark">Close Drawing</button>
					</div>
					<!-- <div class="form-group row">
						<label for="staticEmail2" class="col-sm-1 col-form-label">Chat</label>
						<div class="col-sm-3">
							<input type="text" name="chatMessage" id="messageInput" class="form-control">
						</div>
						<div class="col-sm-2">
							<button id="sendMessage" class="btn btn-outline-dark form-control">Send</button>
						</div>
					</div> -->
					<div class="form-group row">
						<label for="staticEmail2" class="col-sm-1 col-form-label">Width</label>
						<div class="col-sm-3">
							<input type="text" name="width" id="widthPlayer" class="form-control" style="width:100px; display: inline-block">
							<span>x <span id="heightPlayer"></span>pixel</span>
						</div>
						<div class="col-sm-2">
							<button id="setSize" class="btn btn-outline-dark form-control">Apply</button>
						</div>
					</div>
					
					<div class="form-group row" >
						<label for="staticEmail2" class="col-sm-1 col-form-label">Video ID</label>
						<div class="col-sm-8">
							<input type="text" name="youtubeUrl" id="youtubeUrl" class="form-control" placeholder="Youtube Video ID">
						</div>
						<div class="col-sm-2">
							<button id="changeUrl" class="btn btn-outline-dark">Change</button>
						</div>
					</div>
				
						
					<div class="form-group row">
						
						<label for="staticEmail2" class="col-sm-1 col-form-label">Room ID</label>

						<label for="staticEmail2" class="col-sm-5 col-form-label">
							<div class="" id="roomIDShare"></div>
						</label>
						
					</div>
					<p>Users Active: <span id="numUser"></span></p>
					<ul id="listUsers"></ul>
				</div>
				<div class="roomChat" id="roomChat">
					<div class="closeChat" id="closeChat">
						<p class="closeText">close</p>
					</div>
					<div class="messagesContainer">
						<ul id="messagesList"></ul>
					</div>
					<form action="" class="formChat" id="formChat">
						<input id="m" autocomplete="off" placeholder="enter message" />
						<button>Send</button>
					</form>
				</div>
				<div class="openChat" id="openChat">
					Open Chat
				</div>
			</div>
		</div>

        <script src="js/jquery-3.4.0.min.js"></script>
		<script src="/socket.io/socket.io.js"></script>
		<script src="js/p5.min.js"></script>
        
        <script>
			const socket = io();
			let username;
			$.ajax({
				url:"/datauser",
				type:"get",
				// data:data,
				dataType:"JSON",
				success: function(data){
					$('#roomIDShare').text(data.id_share)
					username = data.username
					socket.emit('joinRoom', { 
						id_user_room : data.id_user_room,
						username : data.username,
						roomId : data.id_share 
					})
				}
			});
			
            // Get room and users
            socket.on('roomUsers', ({users}) => {
            	// console.log("roomUsers: ");
				// console.log(users);
				$('#numUser').text(users.length);
				$('#listUsers').html(function(){
					return users.map(user => `<li>${user.username}</li>`).join('');	
				});   
			});
            // Message from server
            socket.on('message', message => {
                console.log(message);
            });
            // 2. This code loads the IFrame Player API code asynchronously.
			var tag = document.createElement('script');
	
			tag.src = "https://www.youtube.com/iframe_api";
			var firstScriptTag = document.getElementsByTagName('script')[0];
			firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
	
			// 3. This function creates an <iframe> (and YouTube player)
			//    after the API code downloads.
			// console.log("SCREENWIDTH: "+screen.width)
			var screenwidth = 640;
			var screenheight = 360;
			if(screen.width<640){
				screenwidth = (screen.width) - 50
				screenheight = screenwidth/(16/9);
			}
			var player;
			function onYouTubeIframeAPIReady() {
				player = new YT.Player('ytplayer', {
					// height: '360',
					// width: '640',
					height: screenheight,
					width: screenwidth,
					// videoId: 'rR4n-0KYeKQ',
					// videoId: 's_L-fp8gDzY',
					// videoId: 'CTQmuq59f-g',
					// videoId: 'FcITAzKW3fY',
					// videoID: ytVideoID,
					events: {
					'onReady': onPlayerReady,
					'onStateChange': onPlayerStateChange
                    },
                    playerVars: {
                        'disablekb': 1,
                        'rel' : 0,
                        'autoplay': 0,
						'start': 1                      
                    }
				});
			}
	
			// 4. The API will call this function when the video player is ready.
			function onPlayerReady(event) {
				// event.target.playVideo();
				event.target.cueVideoById(ytVideoID)
				// console.log(event.target.cueVideoById(ytVideoID))
			}
	
			// 5. The API calls this function when the player's state changes.
			//    The function indicates that when playing a video (state=1),
			//    the player should play for six seconds and then stop.
			var isPlaying = false;
			function onPlayerStateChange(event) {
				sendClick(event.data);
			}
			function sendClick(playerStatus){
				if (playerStatus == -1) {
					// color = "#37474F"; // unstarted = gray
					// console.log("unstarted");
				} else if (playerStatus == 0) {
					// color = "#FFFF00"; // ended = yellow
				} else if (playerStatus == 1) {
					// color = "#33691E"; // playing = green
					// console.log("start");
					updateProgress();
				} else if (playerStatus == 2) {
					// color = "#DD2C00"; // paused = red
					// console.log("Pause");
				} else if (playerStatus == 3) {
					// color = "#AA00FF"; // buffering = purple
				} else if (playerStatus == 5) {
					// color = "#FF6DOO"; // video cued = orange
				}
			}
			function getTime(){
				// console.log(player.getCurrentTime());
			}
			function lompatKe(){
				// console.log("Lanjut");
				player.seekTo(player.getCurrentTime(), false);
			}
			function stopVideo() {
				player.stopVideo();
			}

			// get youtube video id
			let ytVideoID;
			socket.on('ytvideoid',({videoID})=>{
				ytVideoID=videoID;
				if(player){
					// console.log("SUDAH READY")
					player.cueVideoById(ytVideoID)
				}
			})

			function updateProgress(){
				setInterval(function(){
					var x = (player.getCurrentTime()/player.getDuration())*100;
					// x = x*100;
					$("#progress").css("width",x+'%');
				},30);
			}
		
			$("#wrapProgress").click(function(e){
				var posX = e.pageX - $(this).offset().left;
				var elWidth = $(this).width();
				var seek = (posX/elWidth)*player.getDuration();
				// console.log(seek +"s");
                player.seekTo(seek,true);
                var status = player.getPlayerState();
                socket.emit('seekSec', {status, seek});
            });
            socket.on('seekSec', ({status, seek})=>{
                player.seekTo(seek,true);
                // console.log("STATUSNYA "+status);
                if(status == 1){
                    player.playVideo();
                }else{
                    player.pauseVideo();
                }
            });
            $("#playControl").click(function(){
                var status = 1;
                var seek = player.getCurrentTime();
                socket.emit('seekSec', {status , seek});
                player.playVideo();
            });
            $("#pauseControl").click(function(){
                var status = 2
                var seek = player.getCurrentTime();
                socket.emit('seekSec', {status, seek});
                player.pauseVideo();
			});
			$("#widthPlayer").keyup(function(){
				var x = $(this).val();
				if(x>0){
					var y = x/(16/9); 
					$("#heightPlayer").text(y);
				}else{
					$("#heightPlayer").text("");
				}
			})
			$('#changeUrl').click(function(){
				var x= $('#youtubeUrl').val();
				socket.emit('changeUrl',x);
				player.cueVideoById(x);
			});
			socket.on('changeUrl',x=>{
				player.cueVideoById(x);
			})
			$("#formChat").submit(function(e){
				e.preventDefault();
				var msg = $("#m").val()
				socket.emit('chatMessage',{username, message:msg})
				$('#m').val('');
			})
			socket.on('chatMessage', ({username, message})=>{
				console.log(username+" "+message)
				$('#messagesList').append($('<li>').text(username+": "+message));
				var scroll = document.getElementById("messagesList");
				scroll.scrollIntoView(false);
			})

			$("#openChat").click(function(){
				$('#openChat').addClass('displayNone');
				$('#roomChat').addClass('displayib');
				$('#closeChat').addClass('displayb');
			})
			$("#closeChat").click(function(){
				$('#openChat').removeClass('displayNone');
				$('#roomChat').removeClass('displayib');
				$('#closeChat').removeClass('displayb');
			})
		</script>
		<script src="js/sketch.js"></script>
	</body>
</html>
